# -*- coding: utf-8 -*-
"""stock_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZAOL73hBXsum42veqscpwmZSkBi4ONvs
"""
import yfinance as yf
import pandas as pd

stock = "GOOG"
df = yf.download(stock, period = "max")

df.columns = df.columns.droplevel(1)  # Removes the 'GOOG' level
df.head()

df.shape

df.describe()

df.info()

df.isna().sum()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.figure(figsize=(15,5))
df['Adj Close'].plot()
plt.xlabel('Years')
plt.ylabel('Adj Close')
plt.title('Closing Price')

def plot_graph(figsize, values, column_name):
  plt.figure(figsize=figsize)
  values.plot()
  plt.xlabel('Years')
  plt.ylabel(column_name)
  plt.title(f'{column_name} Google Data')

df.columns

for column in df.columns:
  plot_graph((15,5), df[column], column)

for i in range(2004,2025):
  print(list(df.index.year).count(i))

df['MA_for_250_days'] = df['Adj Close'].rolling(250).mean()

df['MA_for_250_days'][0:250].tail()

plot_graph((15,5), df['MA_for_250_days'], 'MA_for_250_days')

plot_graph((15,5), df[['Adj Close','MA_for_250_days']], 'MA_for_250_days')

df['MA_for_100_days'] = df['Adj Close'].rolling(100).mean()
plot_graph((15,5), df[['Adj Close','MA_for_100_days']], 'MA_for_100_days')

plot_graph((25,5), df[['Adj Close','MA_for_100_days','MA_for_250_days']], 'MA')

df['percentage_change_cp'] = df['Adj Close'].pct_change()
df['percentage_change_cp']

plot_graph((15,5), df['percentage_change_cp'], 'percentage_change')

adj_close_price = df[['Adj Close']]

max(adj_close_price.values),min(adj_close_price.values)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range = (0,1))
scaled_data = scaler.fit_transform(adj_close_price)
scaled_data

len(scaled_data)

x_data = []
y_data = []

for i in range(100,len(scaled_data)):
  x_data.append(scaled_data[i-100:i])
  y_data.append(scaled_data[i])

import numpy as np
x_data = np.array(x_data)
y_data = np.array(y_data)

x_data[0],y_data[0]

int(len(x_data)*0.7)

5121-100-int(len(x_data)*0.7)

splitting_len = int(len(x_data)*0.7)
x_train = x_data[:splitting_len]
y_train = y_data[:splitting_len]

x_test = x_data[splitting_len:]
y_test = y_data[splitting_len:]

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

from keras.models import Sequential
from keras.layers import Dense, LSTM

model = Sequential()
model.add(LSTM(128, return_sequences = True, input_shape = (x_train.shape[1],1)))
model.add(LSTM(64, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size = 1, epochs = 2)

predictions = model.predict(x_test)

predictions

inv_pred=scaler.inverse_transform(predictions)
inv_pred

inv_y_test=scaler.inverse_transform(y_test)
inv_y_test

rmse=np.sqrt(np.mean((inv_pred-inv_y_test)**2))

rmse

plot_data = pd.DataFrame(
    {
        'original_test_data':inv_y_test.reshape(-1),
        'predictions':inv_pred.reshape(-1)
    },
    index = df.index[splitting_len+100:]
)
plot_data.head()

plot_graph((15,6), plot_data, 'test data')

plot_graph((15,6), pd.concat([adj_close_price[:splitting_len+100],plot_data], axis=0), 'whole data')

model.save("Latest_stock_price_model.keras")

